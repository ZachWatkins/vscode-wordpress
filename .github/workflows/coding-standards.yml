name: Coding Standards

on:
  push:
    branches:
      - main
    tags:
      - "[0-9]+.[0-9]"
      - "[0-9]+.[0-9].[0-9]+"
  pull_request:
    branches:
      - main
    paths:
      # Any change to a PHP or JavaScript file should run checks.
      - "**.js"
      - "**.php"
      # These files configure npm. Changes could affect the outcome.
      - "package*.json"
      # These files configure Composer. Changes could affect the outcome.
      - "composer.*"
      # This file configures JSHint. Changes could affect the outcome.
      - ".jshintrc"
      # This file configures PHPCS. Changes could affect the outcome.
      - "phpcs.xml.dist"
      # Changes to workflow files should always verify all workflows are successful.
      - ".github/workflows/*.yml"
  workflow_dispatch:

# Cancels all previous workflow runs for pull requests that have not completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name for pull requests
  # or the commit hash for any other events.
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true

jobs:
  # Runs PHP coding standards checks.
  #
  # Violations are reported inline with annotations.
  #
  # Performs the following steps:
  # - Checks out the repository.
  # - Sets up PHP.
  # - Logs debug information.
  # - Configures caching for PHPCS scans.
  # - Installs Composer dependencies (use cache if possible).
  # - Make Composer packages available globally.
  # - Logs PHP_CodeSniffer debug information.
  # - Runs PHPCS on the full codebase with warnings suppressed.
  # - Runs PHPCS on the `tests` directory without warnings suppressed.
  # - Ensures version-controlled files are not modified or deleted.
  phpcs:
    name: PHP coding standards
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: ${{ github.repository == 'ZachWatkins/vscode-wordpress' || github.event_name == 'pull_request' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "7.4"
          coverage: none
          tools: composer, cs2pr

      - name: Log debug information
        run: |
          php --version
          composer --version

      # This date is used to ensure that the PHPCS cache is cleared at least once every week.
      # http://man7.org/linux/man-pages/man1/date.1.html
      - name: "Get last Monday's date"
        id: get-date
        run: echo "date=$(/bin/date -u --date='last Mon' "+%F")" >> $GITHUB_OUTPUT

      - name: Cache PHPCS scan cache
        uses: actions/cache@v3
        with:
          path: .cache/phpcs.json
          key: ${{ runner.os }}-date-${{ steps.get-date.outputs.date }}-phpcs-cache-${{ hashFiles('**/composer.json', 'phpcs.xml.dist') }}

      - name: Install Composer dependencies
        uses: ramsey/composer-install@v2
        with:
          composer-options: "--no-progress --no-ansi"

      - name: Make Composer packages available globally
        run: echo "${PWD}/vendor/bin" >> $GITHUB_PATH

      - name: Log PHPCS debug information
        run: phpcs -i

      - name: Run PHPCS on all Core files
        id: phpcs-core
        run: phpcs -n --report-full --report-checkstyle=./.cache/phpcs-report.xml

      - name: Show PHPCS results in PR
        if: ${{ always() && steps.phpcs-core.outcome == 'failure' }}
        run: cs2pr ./.cache/phpcs-report.xml

      - name: Check test suite files for warnings
        id: phpcs-tests
        run: phpcs tests --report-full --report-checkstyle=./.cache/phpcs-tests-report.xml

      - name: Show test suite scan results in PR
        if: ${{ always() && steps.phpcs-tests.outcome == 'failure' }}
        run: cs2pr ./.cache/phpcs-tests-report.xml

      - name: Ensure version-controlled files are not modified during the tests
        run: git diff --exit-code

  # Runs the JavaScript coding standards checks.
  #
  # JSHint violations are not currently reported inline with annotations.
  #
  # Performs the following steps:
  # - Checks out the repository.
  # - Logs debug information about the GitHub Action runner.
  # - Installs Node.js.
  # - Logs updated debug information.
  # _ Installs npm dependencies.
  # - Run the WordPress JSHint checks.
  # - Ensures version-controlled files are not modified or deleted.
  jshint:
    name: JavaScript coding standards
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: ${{ github.repository == 'ZachWatkins/vscode-wordpress' || github.event_name == 'pull_request' }}
    env:
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: ${{ true }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log debug information
        run: |
          npm --version
          node --version
          git --version
          svn --version

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: ".nvmrc"
          cache: npm

      - name: Log debug information
        run: |
          npm --version
          node --version

      - name: Install Dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run jshint

      - name: Ensure version-controlled files are not modified or deleted
        run: git diff --exit-code
